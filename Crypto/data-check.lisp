
(in-package :edec)

(defmacro gen-chk-sig (place)
  `(list* ',place (cdr (ssig-sign ,place))))

(defun verify-chk-sig (chk-sig)
  (with-simple-restart (continue "Check remaining signatures")
    (assert (apply #'ssig-verify
                   (eval (car chk-sig))
                   (cdr chk-sig))
        ()
      "Data does not match signature: ~A" (car chk-sig)
      )))

;; -------------------------------------------------
(with-ed-curve :curve1174
  (unless (boundp '*my-pkey*)
    (multiple-value-bind (pkey shares)
        (gen-key-pair)
      (distribute-shares shares)
      (setf *my-pkey* pkey)))
  (assert (ed-pt= *my-pkey*
                  (ed-mul *ed-gen* *my-skey*))
      ))
;; ---------------------------------------------------
#|
(with-ed-curve :curve1174
  (let ((*print-readably* t))
    (pprint
     (loop for sym in '(*my-pkey*
                        *my-skey*
                        *curve1174*
                        *curve-E382*
                        *curve41417*
                        *curve-Ed448*
                        *curve-e521*
                        *curve-Ed3363*
                        core-crypto::*wordlist*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))

#-:WINDOWS
(with-ed-curve :curve1174
  (let ((*print-readably* t))
    (pprint
     (loop for sym in '(pbc::*pairing-fr449-params*
                        pbc::*pairing-fr256-params*
                        pbc::*pairing-fr255-params*
                        pbc::*pairing-fr250-params*
                        pbc::*pairing-fr248-params*
                        pbc::*pairing-fr247-params*
                        pbc::*pairing-fr256-params-old*
                        pbc::*pairing-default-ar160-params*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))
|#
#||#
(with-ed-curve :curve1174
  (dolist (sig 
           '((*MY-PKEY*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              486884583496427720027007124776392830617752455011931700759682802128743192300
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "DA0E08B1CA00D03EA26D97698CF00547B24641E7212FE6C26B05BBDD0AE2FE70"))))
             (*MY-SKEY*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              490159145281910257196942417037355645807654072602900158123161817972993394365
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "541490B4CCD143D7C31E5CAF057AAA519E82A19413416BD7D737C352D8360A9D"))))
             (*CURVE1174*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              656382371187308899910765345948376954265611482231937389606891313046749804353
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "88493F5F84DB6FC5DD186402E042AC19BD9C42AE7ABA1DD90E51ABE9B9C1D93B"))))
             (*CURVE-E382*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              658254809269394899188682355212467924822201747434160766690440996336607556252
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "35BFA51B9E6B36D075433DD145D85972925A99228D094FBDD4243EC39AB47FA5"))))
             (*CURVE41417*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              485754332892140117244190745516321268917190260777784900501027620958571361599
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "BA902A8C376216EA90B3449115991EEED088522095B50CCE3BCAA0705F51DEA7"))))
             (*curve-ed448*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              461261510847306345628901703857937427869228987067051135204635490512172202290
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "4F8E4D0021D61757804897939758DDACB28251A8CC30418480EB0AC75CD0E7E2"))))
             (*CURVE-E521*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              487799215521608079290661585544917104014471188741466130597051457305043431302
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "5A78BB0304B1945A7CAFA67C726C35F5A943E472A6298805CC91F1BF5DB7FFB4"))))
             (*CURVE-ED3363*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              680477324637338536085045934802488694558630742122309588118625840321386573377
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "DADCF8D175E0301046C47C3493378B4BB090FB421B0D9E2CBE64F7195D0DB3AD"))))
             (CORE-CRYPTO::*WORDLIST*
              #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
              274184093805537517919046386270171787343993061824644097336893608058312627706
              #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "52742D685D69BCBE1CCF92336A5C35A65E67BDF03733C4CFA8A09ADEEE648DF4"))))))
    (verify-chk-sig sig)))

#-:WINDOWS
(with-ed-curve :curve1174
  (dolist (sig
           '((PBC-INTERFACE::*PAIRING-FR449-PARAMS*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  297024498631435053592284923024105673154677746582703514285311734367027299984
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "628DD2C14C3D24E092D33D729370EEB0EA36AF2587E1A76B8C9B0B122CC722F3"))))
 (PBC-INTERFACE::*PAIRING-FR256-PARAMS*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  806487021834388995359229915090639648705587680287361125340478315451250925641
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "879B176977CF5AAA34727C3F854D6EDAD494A66FE1568F1EC3646682D41AA0A4"))))
 (PBC-INTERFACE::*PAIRING-FR255-PARAMS*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  560339499451011097491687998463753150251810767986336708935501498092019202400
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "97618A252BA2FEDCC546AB030630275CB1C8061E0314189BFA44CF2858024222"))))
 (PBC-INTERFACE::*PAIRING-FR250-PARAMS*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  269134741354515391587265650197373166309830005738614362785893556755912043640
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "CEE1D2FAD791A07B211CDECBCC72EFABE55D5446423AFE7860A683AC72FBC6E5"))))
 (PBC-INTERFACE::*PAIRING-FR248-PARAMS*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  513379523100476350605000495220376408094619364417509932237146327539047008780
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "255B9121D413B9B0B419FC0DF6FC41B5A3CFBAC4CED1D3917FF755EE02711330"))))
 (PBC-INTERFACE::*PAIRING-FR247-PARAMS*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  324508117007680514554292074677367266535599113953293402242628929182670328406
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "A143AD2AEC93ED851637606219DD4F36C5CCCF154F5C0269DE5339BD170DCB08"))))
 (PBC-INTERFACE::*PAIRING-FR256-PARAMS-OLD*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  360206292603788418979264259986076960082458148871865275933976566167961721820
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "E3151ED7408A56C5402BEDF28CD2C4C2810071CA253506254BEE603D47A42F28"))))
 (PBC-INTERFACE::*PAIRING-DEFAULT-AR160-PARAMS*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692)
  645873027534872362338107462999018409876485514092037077134043738249994381720
  #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "7E8BB0A0C8A6D6002084E6CEDC2E3F8334DEAFA7402F0E747F8FE3BC37DBD7A6"))))))
    (verify-chk-sig sig)))


#||#
