
(in-package :cps)

(inspect (compile nil (lambda (n)
                        (um:nlet fib ((x n))
                          (if (< x 2)
                              x
                            (+ (fib (- x 1))
                               (fib (- x 2)))
                            )))))

(inspect (compile nil (lambda (n)
                        (=nlet fib ((x n))
                          (if (< x 2)
                              (=values x)
                            (=bind (t1)
                                (fib (- x 1))
                              (=bind (t2)
                                  (fib (- x 2))
                                (=values (+ t1 t2))
                                )))))
                  ))

(defun fib (n)
  #F
  (declare (optimize (debug 0)))
  (=nlet fib-aux ((x n))
    (declare (dynamic-extent #'fib-aux))
    (if (< x 2)
        (=values x)
      (=bind (t1)
          (fib-aux (- x 1))
        (=bind (t2)
            (fib-aux (- x 2))
          (=values (+ t1 t2))
          )))))

(defun fib (n)
  #F
  (declare (optimize (debug 0)))
  (=labels ((fib-aux (x)
              (if (< x 2)
                  (=values x)
                (=bind (t1)
                    (fib-aux (- x 1))
                  (=bind (t2)
                      (fib-aux (- x 2))
                    (=values (+ t1 t2)))))))
    (with-cont
      (fib-aux n))))

(defun fib (n)
  (=nlet-tail fib-aux ((x n))
    (if (< x 2)
        (=values x)
      (=bind (t1)
          (fib-aux (- x 1))
        (=bind (t2)
            (fib-aux (- x 2))
          (=values (+ t1 t2))
          )))))